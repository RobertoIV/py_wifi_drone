import socket
import time
import threading

import numpy as np
import cv2

try:
    import gi
    gi.require_version("Gst", "1.0")
    from gi.repository import Gst, GLib
except ImportError:
    print "Couldn't open gstreamer"




DATA = [
            bytearray([0x49, 0x54, 0x64, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00,
                0x00, 0x0F, 0x32, 0x81, 0x95, 0x45, 0x2E, 0xF5, 0xE1, 0xA9,
                0x28, 0x10, 0x86, 0x63, 0x17, 0x36, 0xC3, 0xCA, 0xE2, 0x64,
                0x30, 0xA3, 0xC1, 0x5E, 0x40, 0xDE, 0x30, 0xF6, 0xD6, 0x95,
                0xE0, 0x30, 0xB7, 0xC2, 0xE5, 0xB7, 0xD6, 0x5D, 0xA8, 0x65,
                0x9E, 0xB2, 0xE2, 0xD5, 0xE0, 0xC2, 0xCB, 0x6C, 0x59, 0xCD,
                0xCB, 0x66, 0x1E, 0x7E, 0x1E, 0xB0, 0xCE, 0x8E, 0xE8, 0xDF,
                0x32, 0x45, 0x6F, 0xA8, 0x42, 0xB7, 0x33, 0x0F, 0xB7, 0xC9, 
                0x57, 0x82, 0xFC, 0x3D, 0x67, 0xE7, 0xC3, 0xA6, 0x67, 0x28, 
                0xDA, 0xD8, 0xB5, 0x98, 0x48, 0xC7, 0x67, 0x0C, 0x94, 0xB2,
                0x9B, 0x54, 0xD2, 0x37, 0x9E, 0x2E, 0x7A]),

            bytearray([0x49, 0x54, 0x64, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00,
                0x00, 0x54, 0xB2, 0xD1, 0xF6, 0x63, 0x48, 0xC7, 0xCD, 0xB6,
                0xE0, 0x5B, 0x0D, 0x1D, 0xBC, 0xA8, 0x1B, 0xCA, 0xE2, 0x64,
                0x30, 0xA3, 0xC1, 0x5E, 0x40, 0xDE, 0x30, 0xF6, 0xD6, 0x95,
                0xE0, 0x30, 0xB7, 0xC2, 0xE5, 0xB7, 0xD6, 0x5D, 0xA8, 0x65,
                0x9E, 0xB2, 0xE2, 0xD5, 0xE0, 0xC2, 0xCB, 0x6C, 0x59, 0xCD,
                0xCB, 0x66, 0x1E, 0x7E, 0x1E, 0xB0, 0xCE, 0x8E, 0xE8, 0xDF, 
                0x32, 0x45, 0x6F, 0xA8, 0x42, 0xB7, 0x33, 0x0F, 0xB7, 0xC9, 
                0x57, 0x82, 0xFC, 0x3D, 0x67, 0xE7, 0xC3, 0xA6, 0x67, 0x28, 
                0xDA, 0xD8, 0xB5, 0x98, 0x48, 0xC7, 0x67, 0x0C, 0x94, 0xB2, 
                0x9B, 0x54, 0xD2, 0x37, 0x9E, 0x2E, 0x7A])
        ]

DATA1 = bytearray([0x49, 0x54, 0x64, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00,
            0x80, 0x86, 0x38, 0xC3, 0x8D, 0x13, 0x50, 0xFD, 0x67, 0x41, 0xC2,
            0xEE, 0x36, 0x89, 0xA0, 0x54, 0xCA, 0xE2, 0x64, 0x30, 0xA3, 0xC1,
            0x5E, 0x40, 0xDE, 0x30, 0xF6, 0xD6, 0x95, 0xE0, 0x30, 0xB7, 0xC2,
            0xE5, 0xB7, 0xD6, 0x5D, 0xA8, 0x65, 0x9E, 0xB2, 0xE2, 0xD5, 0xE0,
            0xC2, 0xCB, 0x6C, 0x59, 0xCD, 0xCB, 0x66, 0x1E, 0x7E, 0x1E, 0xB0,
            0xCE, 0x8E, 0xE8, 0xDF, 0x32, 0x45, 0x6F, 0xA8, 0x42, 0xEB, 0x20,
            0xBE, 0x38, 0x3A, 0xAB, 0x05, 0xA8, 0xC2, 0xA7, 0x1F, 0x2C, 0x90,
            0x6D, 0x93, 0xF7, 0x2A, 0x85, 0xE7, 0x35, 0x6E, 0xFF, 0xE1, 0xB8,
            0xF5, 0xAF, 0x09, 0x7F, 0x91, 0x47, 0xF8, 0x7E])

HEARTBEAT = bytearray([0x49,0x54,0x64,0x00,0x00,0x00,0x52,0x00,0x00,0x00,0xeb,
            0xdf,0xee,0xab,0x01,0x76,0x64,0x3e,0x47,0x07,0x60,0x2d,0xe5,0xe9,
            0x86,0x59,0xac,0xef,0x63,0xf7,0x71,0x57,0xab,0x2f,0x53,0xe3,0xf7,
            0x68,0xec,0xd9,0xe1,0x85,0x47,0xb8,0xc2,0x2e,0x21,0xd0,0x1b,0xfb,
            0x6b,0x3d,0xe3,0x25,0xa2,0x7b,0x8f,0xb3,0xac,0xef,0x63,0xf7,0x71,
            0x57,0xab,0x2f,0x53,0xe3,0xf7,0x68,0xec,0xd9,0xe1,0x85,0xb7,0x33,
            0x0f,0xb7,0xc9,0x57,0x82,0xfc,0x3d,0x67,0xe7,0xc3,0xa6,0x67,0x28,
            0xda,0xd8,0xb5,0x98,0x48,0xc7,0x67,0x0c,0x94,0xb2,0x9b,0x54,0xd2,
            0x37,0x9e,0x2e,0x7a])


class DroneVideo(threading.Thread):
    def __init__(self):
        super(DroneVideo, self).__init__()
        self.ip = '172.16.10.1'
        self.port = 8888
        self.fh = open("fpv.mp4", 'wb')
        self.daemon = True

        Gst.init([])  # init gstreamer
        self.source = Gst.ElementFactory.make("appsrc", "vidsrc")
        parser = Gst.ElementFactory.make("h264parse", "h264parser")
        decoder = Gst.ElementFactory.make("avdec_h264", "h264decoder")
        convert = Gst.ElementFactory.make("videoconvert", "yuv_to_rgb")
        self.output = Gst.ElementFactory.make("appsink")
        caps = Gst.caps_from_string("video/x-raw, format=(string)BGR;")
        self.output.set_property("caps", caps)
        self.output.set_property("emit-signals", True)
        self.output.connect("new-sample", self.new_buffer, self.output)

        self.pipeline = Gst.Pipeline.new()
        self.pipeline.add(self.source)
        self.pipeline.add(parser)
        self.pipeline.add(decoder)
        self.pipeline.add(convert)
        self.pipeline.add(self.output)

        # # Link the elements
        self.source.link(parser)
        parser.link(decoder)
        decoder.link(convert)
        convert.link(self.output)

        self.image_arr = None
        self.last_send = time.time()

        self.pipeline.set_state(Gst.State.PLAYING)
        self.start_time = time.time()
        self.last_image_ts = time.time()
        self.start()

    def new_buffer(self, sink, data):
        sample = self.output.emit("pull-sample")
        arr = self.gst_to_opencv(sample)
        self.image_arr = arr
        self.last_image_ts = time.time()
        return Gst.FlowReturn.OK

    def gst_to_opencv(self, sample):
        buf = sample.get_buffer()
        caps = sample.get_caps()

        arr = np.ndarray(
            (caps.get_structure(0).get_value('height'),
             caps.get_structure(0).get_value('width'),
             3),
            buffer=buf.extract_dup(0, buf.get_size()),
            dtype=np.uint8)
        return arr

    def run(self):
        count = 0
        video = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        video.connect((self.ip, self.port))

        video.send(DATA[0])
        print("video link", len(video.recv(8192)))
        video.send(DATA[1])
        print("video link", len(video.recv(8192)))

        stream = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        stream.connect((self.ip, self.port))
        stream.send(DATA1)
        stream.settimeout(5)

        heartbeat = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        heartbeat.connect((self.ip, self.port))
        heartbeat.send(HEARTBEAT)
        print("heartbeat", len(heartbeat.recv(8192)))

        while True:
            count +=1
            try:
                data = stream.recv(8192/2)
                buf = Gst.Buffer.new_allocate(None, len(data), None)
                assert buf is not None
                buf.fill(0, data)
                self.source.emit("push-buffer", buf)
                if time.time() - self.last_send > 5.0:
                    heartbeat.send(HEARTBEAT)
                    self.last_send = time.time()

            except socket.timeout:
                print "timeout: ", time.time() - self.start_time
                stream.close()
                video.close()
                return count

if __name__ == "__main__":
    dv = DroneVideo()
    while True:
        im = dv.image_arr
        if im is not None:
            cv2.imshow('frame', im)
            cv2.waitKey(1)
